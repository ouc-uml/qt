#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "torecdialog.h"
#include "errordialog.h"
#include "global.h"
#include "addbookdialog.h"
#include "addstudialog.h"
#include "confirmdialog.h"
#include "stubordialog.h"
#include "connect.h"
#include "library.h"
#include "deletebookdialog.h"
#include "sendmsgdialog.h"

#include <QPushButton>
#include <QGridLayout>
#include <QHBoxLayout>
#include <QVBoxLayout>
#include <QPushButton>
#include <QTableWidget>
#include <QTableWidget>
#include <QWidget>
#include <QSpacerItem>
#include <QLabel>
#include <QTableWidget>
#include <QString>
#include <QStringList>
#include <string>
#include <cstring>
#include <algorithm>
#include <cmath>
#include <vector>
#include <QLineEdit>
#include <QComboBox>
#include <QDialog>


using namespace  std;

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    //normal

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::newAllButtons()
{
    //
    bookSearchBtn = new QPushButton("图书检索");
    searchBtn = new QPushButton("搜索");
    detailBtn = new QPushButton("图书预约");

    toRecommendBtn = new QPushButton("图书荐购");
    myLibraryBtn = new QPushButton("我的图书馆");
    mainBtn      = new QPushButton("主页");
    myInfoBtn    = new QPushButton("我的信息");
    curBorrowBtn = new QPushButton("借阅信息");
    hisBorrowBtn = new QPushButton("历史借阅");
    recommendBtn = new QPushButton("荐购信息");
    appointBtn   = new QPushButton("预约信息");

    //admin
    adBookBtn = new QPushButton("图书管理");
    adBookSearchBtn = new QPushButton("图书搜索");
    adBookAddBtn = new QPushButton("图书增加");
    adBookDeleteBtn = new QPushButton("详细信息");
    adBookUpdateBtn = new QPushButton("图书修改");
    adBooksAddBtn = new QPushButton("批量导入图书");

    adStuBtn = new QPushButton("用户管理");
    adStuAddBtn = new QPushButton("增加用户");
    adStuDeleteBtn = new QPushButton("删除用户");
    adStuSearchBtn = new QPushButton("用户搜索");
    adStuUpdateBtn = new QPushButton("修改用户信息");
    adStuHisBorBtn = new QPushButton("历史借阅");
    adStuCurBorBtn = new QPushButton("当前借阅");
    sendMsgBtn = new QPushButton("发送信息");
    adStusAddBtn = new QPushButton("批量导入用户");

    adToRecommendBtn = new QPushButton("荐购管理");
    adRecUpdateBtn = new QPushButton("荐购修改");
    adRecomBtn = new QPushButton("荐购搜索");

    adBorRetBtn = new QPushButton("借还书");
    adBorBookBtn = new QPushButton("借书");
    adRetBookBtn = new QPushButton("还书");

}
void MainWindow::deleteAllButtons()
{
    //
    delete bookSearchBtn;
    delete searchBtn;
    delete detailBtn;

    delete toRecommendBtn;

    delete myLibraryBtn;
    delete mainBtn;
    delete myInfoBtn;
    delete curBorrowBtn;
    delete hisBorrowBtn;
    delete recommendBtn;
    delete appointBtn;

    //
    delete adBookBtn;
    delete adBookSearchBtn;
    delete adBookAddBtn;
    delete adBookDeleteBtn;
    delete adBookUpdateBtn;

    delete adStuBtn;
    delete adStuSearchBtn;
    delete adStuAddBtn;
    delete adStuDeleteBtn;
    delete adStuUpdateBtn;
    delete adStuHisBorBtn;
    delete adStuCurBorBtn;
    delete sendMsgBtn;

    delete adToRecommendBtn;
    delete adRecUpdateBtn;
    delete adRecomBtn;

    delete adBorRetBtn;
    delete adBorBookBtn;
    delete adRetBookBtn;
}
void MainWindow::newAllLayouts()
{

    mainLayout = new QVBoxLayout;
    toplayout = new QHBoxLayout;
    midlayout = new QHBoxLayout;
    botlayout = new QHBoxLayout;
    leftlayout = new QVBoxLayout;
    rightlayout = new QVBoxLayout;

    adMainLy = new QVBoxLayout;
    adTopLy = new QHBoxLayout;
    adMidLy = new QHBoxLayout;
    adBotLy = new QHBoxLayout;
    adLeftLy = new QVBoxLayout;
    adRightLy = new QVBoxLayout;

}
void MainWindow::deleteAllLayouts()
{
    delete rightlayout;
    delete leftlayout;
    delete botlayout;
    delete midlayout;
    delete toplayout;
    delete mainLayout;

    delete adRightLy;
    delete adLeftLy;
    delete adBotLy;
    delete adMidLy;
    delete adTopLy;
    delete adMainLy;
}
void MainWindow::newAllWidgets()
{
    topW = new QWidget;
    midW = new QWidget;
    botW = new QWidget;
    leftW = new QWidget;
    rightW = new QWidget;

    adTopW = new QWidget;
    adMidW = new QWidget;
    adBotW = new QWidget;
    adLeftW = new QWidget;
    adRightW = new QWidget;
}
void MainWindow::deleteAllWidgets()
{
    delete rightW;
    delete leftW;
    delete botW;
    delete midW;
    delete topW;

    delete adRightW;
    delete adLeftW;
    delete adBotW;
    delete adMidW;
    delete adTopW;
}
void MainWindow::newNorMyLibLW()
{
    mainLayout = new QVBoxLayout;
    botlayout = new QHBoxLayout;
    rightlayout = new QVBoxLayout;
    rightW = new QWidget;
}
void MainWindow::deleteNorMyLibLW()
{
    delete rightlayout;
    delete botlayout;
    delete mainLayout;
    delete rightW;
}
void MainWindow::setThis()
{
    this->resize(800,400);
    this->setWindowTitle("图书管理系统");
}
void MainWindow::addNorTopLy()
{
    toplayout->addWidget(bookSearchBtn);
    toplayout->addWidget(myLibraryBtn);
}
void MainWindow::setNorTopW()
{
    topW->setLayout(toplayout);
    topW->setFixedHeight(40);
}
void MainWindow::addNorLeftMyLibLy()
{
    leftlayout->addWidget(mainBtn);
    leftlayout->addWidget(myInfoBtn);
    leftlayout->addWidget(curBorrowBtn);
    leftlayout->addWidget(hisBorrowBtn);
    leftlayout->addWidget(recommendBtn);
    leftlayout->addWidget(appointBtn);
}
void MainWindow::setNorLeftW()
{
    leftW->setLayout(leftlayout);
    leftW->setFixedWidth(100);
    //leftW->setFixedHeight(150);
}
void MainWindow::addNorRightLy()
{

}
void MainWindow::setNorRightW()
{
    rightW->setLayout(rightlayout);
}
void MainWindow::addNorBotLy()
{
     botlayout->addWidget(leftW);
     botlayout->addWidget(rightW);
}
void MainWindow::setNorBotW()
{
    botW->setLayout(botlayout);
}
void MainWindow::addNorMainLy(int flag)
{
    mainLayout->addWidget(topW);
    if(flag == 1)
        mainLayout->addWidget(midW);
    mainLayout->addWidget(botW);
}
void MainWindow::connNor()
{
    connect(mainBtn,        SIGNAL(clicked(bool)),  this,   SLOT(on_mainBtn_clicked()));
    connect(myInfoBtn,      SIGNAL(clicked(bool)),  this,   SLOT(on_myInfoBtn_clicked()));
    connect(curBorrowBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_curBorrowBtn_clicked()));
    connect(hisBorrowBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_hisBorrowBtn_clicked()));
    connect(recommendBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_recommendBtn_clicked()));
    connect(appointBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_appointBtn_clicked()));
    connect(bookSearchBtn,  SIGNAL(clicked(bool)),  this,   SLOT(on_bookSearchBtn_clicked()));
    connect(myLibraryBtn,  SIGNAL(clicked(bool)),  this,   SLOT(on_myLibraryBtn_clicked()));
    connect(searchBtn,  SIGNAL(clicked(bool)),  this,   SLOT(on_searchBtn_clicked()));
    connect(detailBtn,  SIGNAL(clicked(bool)),  this,   SLOT(on_detailBtn_clicked()));
}
void MainWindow::addAdminTopLy()
{
    adTopLy->addWidget(adBookBtn);
    adTopLy->addWidget(adStuBtn);
    adTopLy->addWidget(adToRecommendBtn);
    adTopLy->addWidget(adBorRetBtn);
}
void MainWindow::setAdminTopW()
{
    adTopW->setLayout(adTopLy);
    adTopW->setFixedHeight(40);
}
void MainWindow::addAdminBotLy()
{
    adBotLy->addWidget(adLeftW);
    adBotLy->addWidget(adRightW);

}
void MainWindow::setAdminBotW()
{
    adBotW->setLayout(adBotLy);
}
void MainWindow::addAdminMainLy(int flag)
{
    adMainLy->addWidget(adTopW);
    if(flag == 1)
        adMainLy->addWidget(adMidW);
    adMainLy->addWidget(adBotW);
}
void MainWindow::connAdmin()
{
    connect(adBookBtn,        SIGNAL(clicked(bool)),  this,   SLOT(on_adBookBtn_clicked()));
    connect(adBookAddBtn,      SIGNAL(clicked(bool)),  this,   SLOT(on_adBookAddBtn_clicked()));
    connect(adBookDeleteBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adBookDeleteBtn_clicked()));
    connect(adBookUpdateBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adBookUpdateBtn_clicked()));
    connect(adBookSearchBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_adBookSearchBtn_clicked()));
    connect(adStuBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_adStuBtn_clicked()));
    connect(adToRecommendBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adToRecommendBtn_clicked()));
    connect(adRecomBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adRecomBtn_clicked()));
    connect(adBorRetBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adBorRetBtn_clicked()));
    connect(adStuAddBtn,      SIGNAL(clicked(bool)),  this,   SLOT(on_adStuAddBtn_clicked()));
    connect(adStuDeleteBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adStuDeleteBtn_clicked()));
    connect(adStuUpdateBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adStuUpdateBtn_clicked()));
    connect(adStuSearchBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_adStuSearchBtn_clicked()));
    connect(adStuHisBorBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_adStuHisBorBtn_clicked()));
    connect(adStuCurBorBtn,     SIGNAL(clicked(bool)),  this,   SLOT(on_adStuCurBorBtn_clicked()));
    connect(adRecUpdateBtn,        SIGNAL(clicked(bool)),  this,   SLOT(on_adRecUpdateBtn_clicked()));
    connect(adBorBookBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adBorBookBtn_clicked()));
    connect(adRetBookBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_adRetBookBtn_clicked()));
    connect(sendMsgBtn,   SIGNAL(clicked(bool)),  this,   SLOT(on_sendMsgBtn_clicked()));

}

void MainWindow::showNormalUser()
{
    setThis();

    newAllButtons();
    newAllLayouts();
    newAllWidgets();

    //上边导航栏
    addNorTopLy();
    setNorTopW();

    //左边导航栏
    addNorLeftMyLibLy();
    setNorLeftW();

    //右边
    setNorRightW();

    addNorBotLy();
    setNorBotW();

    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);

    connNor();
}

void MainWindow::on_bookSearchBtn_clicked()
{
    //deleteAllButtons();
    deleteAllLayouts();
    deleteAllWidgets();

    newAllButtons();
    newAllLayouts();
    newAllWidgets();

    //top
    addNorTopLy();
    setNorTopW();
    //mid
    zzCb = new QComboBox;
    QStringList zzCb_sl;
    zzCb_sl<<"按照书名查询"<<"按照ISBN查询";
    zzCb->addItems(zzCb_sl);
    conditionLe = new QLineEdit;
    conditionLe->setMaxLength(30);
    midlayout->addWidget(zzCb);
    midlayout->addWidget(conditionLe);
    midlayout->addWidget(searchBtn);
    midW->setLayout(midlayout);

    //left
    detailBtn = new QPushButton("详细信息");
    leftlayout->addWidget(detailBtn);
    leftW->setLayout(leftlayout);

    //right
    table2 = new QTableWidget;
    table2->setColumnCount(7);
    QStringList tableheader;
    tableheader<<"ISBN"<<"入库时间"<<"负责人工号"<<"书名"<<"类别"<<"编著人"<<"出版社";
    table2->setHorizontalHeaderLabels(tableheader);
    table2->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);
    for(int i=0;i<6;i++)
        table2->setColumnWidth(i,90);
    table2->setSelectionBehavior(QAbstractItemView::SelectRows);
    table2->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table2->setSelectionMode(QAbstractItemView::SingleSelection);
    rightlayout->addWidget(table2);
    rightW->setLayout(rightlayout);

    //
    addNorBotLy();
    setNorBotW();
    addNorMainLy(1);
    ui->centralWidget->setLayout(mainLayout);

    connNor();
}

void MainWindow::on_searchBtn_clicked()
{
    int flag = zzCb->currentIndex();
    string sCondition = conditionLe->text().toStdString();
    vector< vector < string > >res;
    if(flag == 1)
        res = search_Bno(sCondition,0);
    else
        res = search_Bclm("书名",sCondition);
    //cout<<res.size()<<endl;
    table2->setRowCount(res.size());
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table2->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }
}

void MainWindow::on_detailBtn_clicked()
{
    if(table2->isItemSelected(table2->currentItem()))
    {
        int row = table2->currentItem()->row();
        string gouziBook = table2->item(row,0)->text().toStdString();
        DeleteBookDialog DBDlg;
        DBDlg.transmit(gouziBook,2);
        DBDlg.setWindowTitle("图书详细信息");
        DBDlg.exec();
        on_searchBtn_clicked();
    }
    else
    {
        ErrorDialog eDlg;
        eDlg.setWindowTitle("图书信息");
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }
}

void MainWindow::on_myLibraryBtn_clicked()
{
    deleteAllLayouts();
    deleteAllWidgets();
    newAllButtons();
    newAllLayouts();
    newAllWidgets();


    //上边导航栏
    addNorTopLy();
    setNorTopW();

    //左边导航栏
    addNorLeftMyLibLy();
    setNorLeftW();

    //右边

    addNorRightLy();
    setNorRightW();

    addNorBotLy();
    setNorBotW();

    addNorMainLy(0);
    ui->centralWidget->setLayout(mainLayout);
    connNor();
}

void MainWindow::on_mainBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();

    //
    QLabel *caonima  = new QLabel;
    caonima->setText("欢迎来到图书馆");
    rightlayout->addWidget(caonima);
    //


    rightW->setLayout(rightlayout);
    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);
}

void MainWindow::on_myInfoBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();
    vector < string >res;
    res = user_info(sUser);
    vector<string>zztmp;
    zztmp.push_back("用户名: " + res[0]);
    if(res[1] == "0")
        zztmp.push_back("冻结状态: 未冻结");
    else
        zztmp.push_back("冻结状态:已冻结");
    zztmp.push_back("昵称: " + res[2]);
    zztmp.push_back("年纪: " + res[3]);
    for(int i=0;i<res.size();i++)
            rightlayout->addWidget(new QLabel(QString::fromStdString(zztmp[i])));

    /*
    QLabel *name = new QLabel;
    name->setText("姓名:zz");
    rightlayout->addWidget(name);

    QLabel *maxBroNum = new QLabel;
    maxBroNum->setText("最大可借图书:12");
    rightlayout->addWidget(maxBroNum);

    QLabel *userType = new QLabel;
    userType->setText("用户类型:普通用户");
    rightlayout->addWidget(userType);

    QLabel *maxAppNum = new QLabel;
    maxAppNum->setText("最大可预约数量:3");
    rightlayout->addWidget(maxAppNum);
    */
    rightW->setLayout(rightlayout);
    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);
}

void MainWindow::on_curBorrowBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();
    //
    QTableWidget *table1 = new QTableWidget;
    table1->setColumnCount(6);

    QStringList tableheader;
    tableheader<<"用户名"<<"ISBN"<<"单本编号"<<"借阅时间"<<"持续时间"<<"状态";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);

    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);

    vector < vector < string > > res;
    res = reader_current(sUser);
    table1->setRowCount(res.size()-1);
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }

    rightlayout->addWidget(table1);
    //
    rightW->setLayout(rightlayout);
    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);
}

void MainWindow::on_hisBorrowBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();
    //
    QTableWidget *table1 = new QTableWidget;
    table1->setColumnCount(6);

    QStringList tableheader;
    tableheader<<"用户名"<<"ISBN"<<"单本编号"<<"借阅时间"<<"持续时间"<<"状态";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);

    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);

    vector < vector < string > > res;
    res = reader_history(sUser);
    table1->setRowCount(res.size()-1);
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }

    rightlayout->addWidget(table1);
    //
    rightW->setLayout(rightlayout);
    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);
}

void MainWindow::on_recommendBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();

    //
    QTableWidget *table1 = new QTableWidget;
    table1->setColumnCount(5);

    QStringList tableheader;
    tableheader<<"用户名"<<"ISBN"<<"书名"<<"荐购时间"<<"状态";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);

    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);

    vector < vector < string > > res;
    res = search_recommend(sUser);
    table1->setRowCount(res.size()-1);
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }

    rightlayout->addWidget(table1);
    toRecommendBtn = new QPushButton("图书荐购");
    rightlayout->addWidget(toRecommendBtn);
    //

    rightW->setLayout(rightlayout);

    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);
    ui->centralWidget->setLayout(mainLayout);
    connect(toRecommendBtn,        SIGNAL(clicked(bool)),  this,   SLOT(on_toRecommendBtn_clicked()));
}

void MainWindow::on_toRecommendBtn_clicked()
{
    toRecDialog toRecDlg;
    toRecDlg.exec();
    on_recommendBtn_clicked();
}

void MainWindow::on_appointBtn_clicked()
{
    deleteNorMyLibLW();
    newNorMyLibLW();
    //
    QTableWidget *table1 = new QTableWidget;
    table1->setColumnCount(6);

    QStringList tableheader;
    tableheader<<"用户名"<<"ISBN"<<"单本编号"<<"预约时间"<<"持续时间"<<"状态";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);

    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);

    vector < vector < string > > res;
    res = search_res(sUser);
    table1->setRowCount(res.size()-1);
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }

    rightlayout->addWidget(table1);
    //
    rightW->setLayout(rightlayout);

    addNorBotLy();
    setNorBotW();
    addNorMainLy(0);

    ui->centralWidget->setLayout(mainLayout);
}

//管理员的操作
void MainWindow::showAdministrator()
{
    setThis();

    newAllButtons();
    newAllLayouts();
    newAllWidgets();
    //上边导航栏
    addAdminTopLy();
    setAdminTopW();
    //中间
    zzCb = new QComboBox;
    QStringList zzCb_sl;
    zzCb_sl<<"按照书名查询"<<"按照书号查询";
    zzCb->addItems(zzCb_sl);
    adconditionLe = new QLineEdit;
    adconditionLe->setMaxLength(30);
    adMidLy->addWidget(zzCb);
    adMidLy->addWidget(adconditionLe);
    adMidLy->addWidget(adBookSearchBtn);
    adMidW->setLayout(adMidLy);
    //左边导航栏
    adLeftLy->addWidget(adBookAddBtn);
    adLeftLy->addWidget(adBookDeleteBtn);
    adLeftLy->addWidget(adBookUpdateBtn);
    adLeftLy->addWidget(adBooksAddBtn);
    adLeftW->setLayout(adLeftLy);
    adLeftW->setFixedWidth(100);
    //leftW->setFixedHeight(150);
    //右边
    table1 = new QTableWidget;
    table1->setColumnCount(7);
    QStringList tableheader;
    tableheader<<"ISBN"<<"入库时间"<<"负责人工号"<<"书名"<<"类别"<<"编著人"<<"出版社";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);
    for(int i=0;i<6;i++)
        table1->setColumnWidth(i,90);
    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);
    adRightLy->addWidget(table1);
    adRightW->setLayout(adRightLy);
    addAdminBotLy();
    setAdminBotW();
    addAdminMainLy(1);

    ui->centralWidget->setLayout(adMainLy);
    connAdmin();
}

void MainWindow::on_adBookBtn_clicked()
{

    deleteAllButtons();
    deleteAllLayouts();
    deleteAllWidgets();
    showAdministrator();
}

void MainWindow::on_adBookSearchBtn_clicked()
{
    int flag = zzCb->currentIndex();
    string sCondition = adconditionLe->text().toStdString();
    vector< vector < string > >res;
    if(flag == 1)
        res = search_Bno(sCondition,0);
    else
        res = search_Bclm("书名",sCondition);
    table1->setRowCount(res.size()-1);
    if (res.size()>0)
        for(int i=1;i<res.size();i++)
        {
            for(int j=0;j<res[i].size();j++)
            {
                table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
            }
        }
}

void MainWindow::on_adBookAddBtn_clicked()
{
    AddBookDialog aBDlg;
    aBDlg.transmit1(1);
    aBDlg.exec();
    //on_adBookSearchBtn_clicked();
}

void MainWindow::on_adBookDeleteBtn_clicked()
{

    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        string gouziBook = table1->item(row,0)->text().toStdString();
        DeleteBookDialog DBDlg;
        DBDlg.transmit(gouziBook,1);
        DBDlg.setWindowTitle("图书详细信息");
        DBDlg.exec();
        //on_adBookSearchBtn_clicked();
    }
    else
    {
        ErrorDialog eDlg;
        eDlg.setWindowTitle("图书信息");
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }
}

void MainWindow::on_adBookUpdateBtn_clicked()
{
    ErrorDialog eDlg;
    eDlg.setWindowTitle("修改图书");
    // 判断是否选中一行
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        vector<string> vtmp;
        for(int i=0;i<7;i++)
            vtmp.push_back(table1->item(row,i)->text().toStdString());
        AddBookDialog aBDlg;

        aBDlg.setWindowTitle("修改图书信息");
        aBDlg.transmit1(2);

        aBDlg.transmit2(vtmp);
        aBDlg.exec();
    }
    else
    {
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }
}

void MainWindow::on_adBooskAddBtn_clicked()
{

}

void MainWindow::on_adStuBtn_clicked()
{
    deleteAllButtons();
    deleteAllLayouts();
    deleteAllWidgets();
    newAllButtons();
    newAllLayouts();
    newAllWidgets();
    //上边导航栏
    addAdminTopLy();
    setAdminTopW();
    //中间
    QLabel *zzLb = new QLabel;
    zzLb->setText("查询学号");
    adMidLy->addWidget(zzLb);
    adconditionLe = new QLineEdit;
    adconditionLe->setMaxLength(10);
    adMidLy->addWidget(adconditionLe);
    adMidLy->addWidget(adStuSearchBtn);
    adMidW->setLayout(adMidLy);
    //左边导航栏
    adLeftLy->addWidget(adStuAddBtn);
    adLeftLy->addWidget(adStuDeleteBtn);
    adLeftLy->addWidget(adStuUpdateBtn);
    adLeftLy->addWidget(adStuHisBorBtn);
    adLeftLy->addWidget(adStuCurBorBtn);
    adLeftLy->addWidget(adStusAddBtn);
    adLeftW->setLayout(adLeftLy);
    adLeftW->setFixedWidth(100);
    //leftW->setFixedHeight(150);
    //右边
    table1 = new QTableWidget;
    table1->setColumnCount(4);
    QStringList tableheader;
    tableheader<<"用户名"<<"状态"<<"昵称"<<"年纪";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);
    for(int i=0;i<5;i++)
        table1->setColumnWidth(i,90);
    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);
    adRightLy->addWidget(table1);
    adRightW->setLayout(adRightLy);

    addAdminBotLy();
    setAdminBotW();
    addAdminMainLy(1);
    ui->centralWidget->setLayout(adMainLy);
    connAdmin();
}

void MainWindow::on_adStuSearchBtn_clicked()
{
    string sCondition = adconditionLe->text().toStdString();
    vector< vector < string > >res;
    vector< string> tmp;
    vector< string> all_name;
    if(sCondition.size()==0)
    {
        //cout<<"caonima"<<endl;
        all_name = all_user();

        for(int i=0;i<all_name.size();i++)
        {
            tmp = user_info(all_name[i]);
            res.push_back(tmp);
        }
    }
    else
    {
        tmp = user_info(sCondition);
        res.push_back(tmp);
    }
    table1->setRowCount(res.size());
    for(int i=0;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }
}

void MainWindow::on_adStuAddBtn_clicked()
{
    addStuDialog aSDlg;
    aSDlg.transmit1(1);
    aSDlg.exec();
}

void MainWindow::on_adStuDeleteBtn_clicked()
{
    ErrorDialog eDlg;
    eDlg.setWindowTitle("删除学生");
    // 判断是否选中一行
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        string tmp = "是否删除该用户: \n";
            tmp += table1->item(row,0)->text().toStdString() + "\n";
        ConfirmDialog cfDlg;
        cfDlg.showMsg(QString::fromStdString(tmp));
        string zz_User = table1->item(row,0)->text().toStdString();
        if(cfDlg.exec() == QDialog::Accepted)
        {
            int zz_Res = delete_user(zz_User);
            if(zz_Res==0)
            {
                eDlg.showError(QString::fromStdString("删除成功"));
            }
            else if(zz_Res==1)
                eDlg.showError(QString::fromStdString("未知错误"));
            else if(zz_Res == 2)
                eDlg.showError(QString::fromStdString("没有权限"));
            else
                eDlg.showError(QString::number(zz_Res,10));
            eDlg.exec();
        }
    }
    else
    {
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }
}

void MainWindow::on_adStuUpdateBtn_clicked()
{
    ErrorDialog eDlg;
    eDlg.setWindowTitle("修改学生信息");
    // 判断是否选中一行
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        vector<string> vtmp;
        for(int i=0;i<4;i++)
            vtmp.push_back(table1->item(row,i)->text().toStdString());
        addStuDialog aSDlg;
        aSDlg.setWindowTitle("修改学生信息");
        aSDlg.transmit1(2);
        aSDlg.transmit2(vtmp);
        aSDlg.exec();
    }
    else
    {
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }
}

void MainWindow::on_adStuHisBorBtn_clicked()
{

    // 判断是否选中一行
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        string tmp = table1->item(row,0)->text().toStdString();
        StuBorDialog sBDlg;
        sBDlg.setWindowTitle("借阅历史");
        sBDlg.transmit(1,tmp);
        sBDlg.exec();
    }
    else
    {
        ErrorDialog eDlg;
        eDlg.setWindowTitle("借阅历史");
        eDlg.showError(QString::fromStdString("没有选中学生"));
        eDlg.exec();
    }
}

void MainWindow::on_adStuCurBorBtn_clicked()
{
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        string tmp = table1->item(row,0)->text().toStdString();
        StuBorDialog sBDlg;
        sBDlg.setWindowTitle("当前借阅");
        sBDlg.transmit(2,tmp);
        sBDlg.exec();
    }
    else
    {
        ErrorDialog eDlg;
        eDlg.setWindowTitle("当前借阅");
        eDlg.showError(QString::fromStdString("没有选中学生"));
        eDlg.exec();
    }
}

void MainWindow::on_adStusAddBtn_clicked()
{

}

void MainWindow::on_adToRecommendBtn_clicked()
{

    deleteAllButtons();
    deleteAllLayouts();
    deleteAllWidgets();
    newAllButtons();
    newAllLayouts();
    newAllWidgets();
    //上边导航栏
    addAdminTopLy();
    setAdminTopW();
    //中间啊啊啊啊
    QLabel *zzLb = new QLabel;
    zzLb->setText("荐购查询");
    adMidLy->addWidget(zzLb);
    adconditionLe = new QLineEdit;
    adconditionLe->setMaxLength(10);
    adMidLy->addWidget(adconditionLe);
    adMidLy->addWidget(adRecomBtn);
    adMidW->setLayout(adMidLy);
    //左边导航栏
    adLeftLy->addWidget(adRecUpdateBtn);
    adLeftW->setLayout(adLeftLy);
    adLeftW->setFixedWidth(100);
    //leftW->setFixedHeight(150);
    //右边
    table1 = new QTableWidget;
    table1->setColumnCount(5);
    QStringList tableheader;
    tableheader<<"用户名"<<"ISBN"<<"书名"<<"荐购时间"<<"状态";
    table1->setHorizontalHeaderLabels(tableheader);
    table1->horizontalHeader()->setDefaultAlignment(Qt::AlignCenter);
    for(int i=0;i<6;i++)
        table1->setColumnWidth(i,90);
    table1->setSelectionBehavior(QAbstractItemView::SelectRows);
    table1->setEditTriggers(QAbstractItemView::NoEditTriggers);
    table1->setSelectionMode(QAbstractItemView::SingleSelection);
    adRightLy->addWidget(table1);
    adRightW->setLayout(adRightLy);
    addAdminBotLy();
    setAdminBotW();
    addAdminMainLy(1);
    ui->centralWidget->setLayout(adMainLy);
    connAdmin();

}

void MainWindow::on_adRecUpdateBtn_clicked()
{
    ErrorDialog eDlg;
    eDlg.setWindowTitle("修改荐购");
    // 判断是否选中一行
    if(table1->isItemSelected(table1->currentItem()))
    {
        int row = table1->currentItem()->row();
        string ccuser = table1->item(row,0)->text().toStdString();
        string ccISBN = table1->item(row,1)->text().toStdString();
        int ccRes = read_recommend(ccuser,ccISBN);
        if(ccRes == 0)
            eDlg.showError("修改成功，该书已为购买状态");
        else if(ccRes == 1)
            eDlg.showError("未知错误");
        else if(ccRes == 2)
            eDlg.showError("没权限");
        eDlg.exec();
    }
    else
    {
        eDlg.showError(QString::fromStdString("没有选中"));
        eDlg.exec();
    }

}

void MainWindow::on_adRecomBtn_clicked()
{
    string scondition = adconditionLe->text().toStdString();
    vector< vector <string> > res;
    if(scondition.size( )== 0)
        res = search_recommend("0");
    else
        res = search_recommend(scondition);
    cout<<"res "<<res.size()<<endl;
    table1->setRowCount(res.size()-1);
    for(int i=1;i<res.size();i++)
    {
        for(int j=0;j<res[i].size();j++)
        {
            table1->setItem(i-1,j,new QTableWidgetItem(QString::fromStdString(res[i][j])));
        }
    }
}

void MainWindow::on_adBorRetBtn_clicked()
 {
    deleteAllButtons();
    deleteAllLayouts();
    deleteAllWidgets();
    newAllButtons();
    newAllLayouts();
    newAllWidgets();


     //上边导航栏
    addAdminTopLy();
    setAdminTopW();
     //左边导航栏
     adLeftLy->addWidget(adBorBookBtn);
     adLeftLy->addWidget(adRetBookBtn);
     adLeftW->setLayout(adLeftLy);
     adLeftW->setFixedWidth(100);
     //leftW->setFixedHeight(150);
     //右边
     QLabel *BnoLb = new QLabel("ISBN号码");
     QLabel *EnoLb = new QLabel("书号");
     QLabel *userLb = new QLabel("学号");
     BnoLe = new QLineEdit;
     EnoLe = new QLineEdit;
     userLe = new QLineEdit;
     QGridLayout *tmpAdRightLy = new QGridLayout;

     tmpAdRightLy->addWidget(BnoLb,1,0,1,1);
     tmpAdRightLy->addWidget(BnoLe,1,1,1,2);
     tmpAdRightLy->addWidget(EnoLb,2,0,2,1);
     tmpAdRightLy->addWidget(EnoLe,2,1,2,2);
     tmpAdRightLy->addWidget(userLb,3,0,3,1);
     tmpAdRightLy->addWidget(userLe,3,1,3,2);

     adRightW->setLayout(tmpAdRightLy);
     adRightW->setFixedSize(300,120);

     addAdminBotLy();
     setAdminBotW();
     addAdminMainLy(0);

     ui->centralWidget->setLayout(adMainLy);
    connAdmin();
 }

void MainWindow::on_adBorBookBtn_clicked()
{
    string sBno = BnoLe->text().toStdString();
    int sEno = EnoLe->text().toInt();
    string ssUser = userLe->text().toStdString();
    ErrorDialog eDlg;
    eDlg.setWindowTitle("借书");
    int ccRes = borrow(sBno,sEno,ssUser,30);
    if(ccRes == 0)
        eDlg.showError(QString::fromStdString("借书成功"));
    else if (ccRes == 1)
        eDlg.showError(QString::fromStdString("结束失败"));
   eDlg.exec();
}

void MainWindow::on_adRetBookBtn_clicked()
{
    string sBno = BnoLe->text().toStdString();
    int sEno = EnoLe->text().toInt();
    ErrorDialog eDlg;
    eDlg.setWindowTitle("还书");
    int ccRes = return_book(sBno,sEno);
    if(ccRes == 0)
        eDlg.showError(QString::fromStdString("还书成功"));
    else
        eDlg.showError(QString::fromStdString("还书失败"));
   eDlg.exec();
}

void MainWindow::recMsg()
{
    vector<string> msg;
    msg = get_message(sUser);
    for(int i=0;i<msg.size();i++)
    {
        ErrorDialog eDlg;
        eDlg.setWindowTitle("消息通知");
        eDlg.showError(QString::fromStdString(msg[i]));
        eDlg.exec();
    }
}



void MainWindow::on_sendMsgBtn_clicked()
{
    sendMsgDialog sMDlg;
    sMDlg.exec();
}
